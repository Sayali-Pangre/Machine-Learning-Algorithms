#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Mar 11 20:21:22 2019

@author: dell
"""

import quandl
import numpy as np
from sklearn import preprocessing,cross_validation
from sklearn.linear_model import LinearRegression
import matplotlib.pyplot as plt
from matplotlib import style
import datetime
import math


style.use('ggplot')    #gray-gray plot Background
df=quandl.get("EURONEXT/ADYEN")
print(df)

df=df[['Open','High','Low','Last','Volume']]
df['HL_PCT']=(df['High']-df['Low'])/df['Last']*100.0
df['PCT_change']=(df['Last']-df['Open']/df['Open'])*100.0
df=df[['Last','HL_PCT','PCT_change','Volume']]
print(df.head())

#--------------------------------------------------------------------

forecast_col='Last' #only given column name
df.fillna(value=-99999,inplace=True)
forecast_out=int(math.ceil(0.01*len(df)))   #one percentage of length of df

df['label']=df['Last'].shift(-forecast_out)    #not giving all data bz if we give all data it will give 100percetaccuracy
#we want list without last 30 observations

X=np.array(df.drop(['label'],1))   #store data without first row i.e label 1 is true
X=preprocessing.scale(X)
X_lately=X[-forecast_out:]
#features
X=X[:-forecast_out]
df.dropna(inplace=True)
y=np.array(df['label'])

#training and testing

X_train,X_test,y_train,y_test=cross_validation.train_test_split(X,y,test_size=0.2)

regression_model=LinearRegression()
regression_model.fit(X_train,y_train)  #train the model
confidence=regression_model.score(X_test,y_test)  #confidence or accuracy
print(confidence)
forecast_set=regression_model.predict(X_lately)


df['Forecast']=np.nan    # for date time and forecast which contains NaN values
last_date=df.iloc[-1].name    #last date with name means timestamp
last_unix=last_date.timestamp()
one_day=86400
next_unix=last_unix+one_day

for i in forecast_set:    #loop for next date upto no of col
    next_date=datetime.datetime.fromtimestamp(next_unix)  #convert unix to datetime
    next_unix+=86400#epoch value from 1 jan 1970 ie unix time
    df.loc[next_date]=[np.nan for _ in range(len(df.columns)-1)]+[i]   #we can also use _ rather than variable


   
plt.plot(df['Last'])
plt.plot(df['Forecast'])
plt.legend(loc=4)
plt.xlabel('Date')
plt.ylabel('Price')
plt.show()

plt.plot(df['Forecast'],c='b')
plt.legend()
plt.xlabel('Date')
plt.ylabel('Price')
plt.show()
